<?php
/**
 *  Webform Visitor Data Control
 */

function form_tracking_form_type_info() {
  $data = &drupal_static(__FUNCTION__);

  if(!isset($data)) {
    $data = module_invoke_all('form_tracking_form_type_info');

    $default = [
      'name' => 'Form API Form',
      'module' => 'form_tracking',
      'weight' => 0,
    ];

    foreach ($data as $form_type_id => $form_type_info) {
      $data[$form_type_id] = $form_type_info + $default;
    }
  }

  return $data;
}

/**
 * Implements hook_permission().
 */
function form_tracking_permission() {
  return array(
    'administer form tracking' => array(
      'title' => t('Administer Form Tracking'),
      'description' => t('Allows users to configure Form Tracking'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 *   hook_menu()
 *   I hate this function...well, specifically the name.
 *   This ain't no menu.
 */
function form_tracking_menu() {
  $items = [];

  $items['admin/config/system/form-tracking'] = [
    'access arguments' => ['administer form tracking'],
    'title' => 'Form Tracking settings',
    'description' => 'Configure Form Tracking',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['form_tracking_admin_settings'],
    'file' => 'includes/form_tracking.admin.inc',
  ];

  return $items;
}

function form_tracking_enabled_forms() {
  $forms = &drupal_static(__FUNCTION__);

  if (!isset($forms)) {
    $forms = [];

    $info = form_tracking_form_type_info();

    foreach ($info as $form_type_id => $form_type_info) {
      $forms[$form_type_id] = variable_get("form_tracking_enabled_forms_$form_type_id", []);
    }
  }

  return $forms;
}

function form_tracking_get_enabled_type($form_id) {
  $enabled_forms = form_tracking_enabled_forms();

  foreach ($enabled_forms as $form_type => $forms) {
    if (in_array($form_id, $forms)) {
      return $form_type;
    }
  }

  return false;
}

function form_tracking_form_alter(&$form, &$form_data, $form_id) {
  $enabled_type = form_tracking_get_enabled_type($form_id);

  if (!$enabled_type) {
    return;
  }

  $data = form_tracking_get_data_for_session();
  
  if (empty($data)) {
    return;
  }

  $info = form_tracking_form_type_info();
  $module = $info[$enabled_type]['module'];
  $function = $module . '_form_tracking_inject';

  // Call the module responsible for injecting the visitor data into the form
  if (function_exists($function)) {
    $parameters = array($data, &$form, &$form_data);

    call_user_func_array($function, $parameters);
  }
}

/**
 * @param null $session_id
 * @param bool $update Whether or not to add to the session data if applicable
 *
 * @return array
 */
function form_tracking_get_data_for_session($session_id = NULL, $update = TRUE) {
  $active_session = ($session_id == NULL);

  if ($active_session) {
    $session_id = session_id();
  } else {
    $update = FALSE;
  }

  if (!$update || !$active_session) {
    return form_tracking_lookup_data($session_id);
  }

  $data = [
    'session_id' => $session_id,
    'timestamp' => time(),
  ];

  $data += module_invoke_all('form_tracking_session_data', $data);

  drupal_alter('form_tracking_session_data', $data);

  form_tracking_save_data($session_id, $data);

  return $data;
}

function form_tracking_save_data($session_id, $data = null) {
  if (is_object($session_id) || is_array($session_id)) {
    $record = $session_id;
  } else {
    $record = [
      'sid' => $session_id,
      'data' => $data
    ];
  }

  if (form_tracking_data_exists($session_id)) {
    drupal_write_record('form_tracking', $record, 'sid');
  } else {
    drupal_write_record('form_tracking', $record);
  }
}

function form_tracking_data_exists($session_id) {
  $results = form_tracking_lookup_data($session_id);

  return (!empty($results));
}

function form_tracking_lookup_data($session_id) {
  $result = db_query('SELECT * FROM {form_tracking} WHERE sid = :sid LIMIT 1', [':sid' => $session_id]);

  $record = $result->fetchAssoc();

  return ($record) ? $record['data'] : array();
}
